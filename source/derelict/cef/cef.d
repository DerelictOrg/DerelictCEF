/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.cef.cef;

public {
      import derelict.cef.functions,
             derelict.cef.types;
      import derelict.util.loader;
}

private {
      import derelict.util.exception,
             derelict.util.system;

      static if( Derelict_OS_Windows )
            enum libNames = "libcef.dll";
      else static if( Derelict_OS_Mac )
            enum libNames = "../Frameworks/Chromium Embedded Framework.framework, /Library/Frameworks/Chromium Embedded Framework.framework, /System/Library/Frameworks/Chromium Embedded Framework.framework";
      else static if( Derelict_OS_Linux )
            enum libNames = "libcef.so";
      else
            static assert( 0, "Need to implement Chromium Embedded Framework libNames for this operating system." );
}

class DerelictCEFLoader : SharedLibLoader {
      public this() {
            super( libNames );
      }

      protected override void loadSymbols() {
            bindFunc( cast( void** )&cef_get_min_log_level, "cef_get_min_log_level" );
            bindFunc( cast( void** )&cef_get_vlog_level, "cef_get_vlog_level" );
            bindFunc( cast( void** )&cef_log, "cef_log" );
            bindFunc( cast( void** )&cef_string_list_alloc, "cef_string_list_alloc" );
            bindFunc( cast( void** )&cef_string_list_size, "cef_string_list_size" );
            bindFunc( cast( void** )&cef_string_list_value, "cef_string_list_value" );
            bindFunc( cast( void** )&cef_string_list_append, "cef_string_list_append" );
            bindFunc( cast( void** )&cef_string_list_clear, "cef_string_list_clear" );
            bindFunc( cast( void** )&cef_string_list_free, "cef_string_list_free" );
            bindFunc( cast( void** )&cef_string_list_copy, "cef_string_list_copy" );
            bindFunc( cast( void** )&cef_string_map_alloc, "cef_string_map_alloc" );
            bindFunc( cast( void** )&cef_string_map_size, "cef_string_map_size" );
            bindFunc( cast( void** )&cef_string_map_find, "cef_string_map_find" );
            bindFunc( cast( void** )&cef_string_map_key, "cef_string_map_key" );
            bindFunc( cast( void** )&cef_string_map_value, "cef_string_map_value" );
            bindFunc( cast( void** )&cef_string_map_append, "cef_string_map_append" );
            bindFunc( cast( void** )&cef_string_map_clear, "cef_string_map_clear" );
            bindFunc( cast( void** )&cef_string_map_free, "cef_string_map_free" );
            bindFunc( cast( void** )&cef_string_multimap_alloc, "cef_string_multimap_alloc" );
            bindFunc( cast( void** )&cef_string_multimap_size, "cef_string_multimap_size" );
            bindFunc( cast( void** )&cef_string_multimap_find_count, "cef_string_multimap_find_count" );
            bindFunc( cast( void** )&cef_string_multimap_enumerate, "cef_string_multimap_enumerate" );
            bindFunc( cast( void** )&cef_string_multimap_key, "cef_string_multimap_key" );
            bindFunc( cast( void** )&cef_string_multimap_value, "cef_string_multimap_value" );
            bindFunc( cast( void** )&cef_string_multimap_append, "cef_string_multimap_append" );
            bindFunc( cast( void** )&cef_string_multimap_clear, "cef_string_multimap_clear" );
            bindFunc( cast( void** )&cef_string_multimap_free, "cef_string_multimap_free" );
            bindFunc( cast( void** )&cef_string_wide_set, "cef_string_wide_set" );
            bindFunc( cast( void** )&cef_string_utf8_set, "cef_string_utf8_set" );
            bindFunc( cast( void** )&cef_string_utf16_set, "cef_string_utf16_set" );
            bindFunc( cast( void** )&cef_string_wide_clear, "cef_string_wide_clear" );
            bindFunc( cast( void** )&cef_string_utf8_clear, "cef_string_utf8_clear" );
            bindFunc( cast( void** )&cef_string_utf16_clear, "cef_string_utf16_clear" );
            bindFunc( cast( void** )&cef_string_wide_cmp, "cef_string_wide_cmp" );
            bindFunc( cast( void** )&cef_string_utf8_cmp, "cef_string_utf8_cmp" );
            bindFunc( cast( void** )&cef_string_utf16_cmp, "cef_string_utf16_cmp" );
            bindFunc( cast( void** )&cef_string_wide_to_utf8, "cef_string_wide_to_utf8" );
            bindFunc( cast( void** )&cef_string_utf8_to_wide, "cef_string_utf8_to_wide" );
            bindFunc( cast( void** )&cef_string_wide_to_utf16, "cef_string_wide_to_utf16" );
            bindFunc( cast( void** )&cef_string_utf16_to_wide, "cef_string_utf16_to_wide" );
            bindFunc( cast( void** )&cef_string_utf8_to_utf16, "cef_string_utf8_to_utf16" );
            bindFunc( cast( void** )&cef_string_utf16_to_utf8, "cef_string_utf16_to_utf8" );
            bindFunc( cast( void** )&cef_string_ascii_to_wide, "cef_string_ascii_to_wide" );
            bindFunc( cast( void** )&cef_string_ascii_to_utf16, "cef_string_ascii_to_utf16" );
            bindFunc( cast( void** )&cef_string_userfree_wide_alloc, "cef_string_userfree_wide_alloc" );
            bindFunc( cast( void** )&cef_string_userfree_utf8_alloc, "cef_string_userfree_utf8_alloc" );
            bindFunc( cast( void** )&cef_string_userfree_utf16_alloc, "cef_string_userfree_utf16_alloc" );
            bindFunc( cast( void** )&cef_string_userfree_wide_free, "cef_string_userfree_wide_free" );
            bindFunc( cast( void** )&cef_string_userfree_utf8_free, "cef_string_userfree_utf8_free" );
            bindFunc( cast( void** )&cef_string_userfree_utf16_free, "cef_string_userfree_utf16_free" );
            bindFunc( cast( void** )&cef_get_current_platform_thread_id, "cef_get_current_platform_thread_id" );
            bindFunc( cast( void** )&cef_get_current_platform_thread_handle, "cef_get_current_platform_thread_handle" );
            bindFunc( cast( void** )&cef_time_to_timet, "cef_time_to_timet" );
            bindFunc( cast( void** )&cef_time_from_timet, "cef_time_from_timet" );
            bindFunc( cast( void** )&cef_time_to_doublet, "cef_time_to_doublet" );
            bindFunc( cast( void** )&cef_time_from_doublet, "cef_time_from_doublet" );
            bindFunc( cast( void** )&cef_time_now, "cef_time_now" );
            bindFunc( cast( void** )&cef_time_delta, "cef_time_delta" );
            bindFunc( cast( void** )&cef_trace_event_instant, "cef_trace_event_instant" );
            bindFunc( cast( void** )&cef_trace_event_begin, "cef_trace_event_begin" );
            bindFunc( cast( void** )&cef_trace_event_end, "cef_trace_event_end" );
            bindFunc( cast( void** )&cef_trace_counter, "cef_trace_counter" );
            bindFunc( cast( void** )&cef_trace_counter_id, "cef_trace_counter_id" );
            bindFunc( cast( void** )&cef_trace_event_async_begin, "cef_trace_event_async_begin" );
            bindFunc( cast( void** )&cef_trace_event_async_step_into, "cef_trace_event_async_step_into" );
            bindFunc( cast( void** )&cef_trace_event_async_step_past, "cef_trace_event_async_step_past" );
            bindFunc( cast( void** )&cef_trace_event_async_end, "cef_trace_event_async_end" );
            bindFunc( cast( void** )&cef_execute_process, "cef_execute_process" );
            bindFunc( cast( void** )&cef_initialize, "cef_initialize" );
            bindFunc( cast( void** )&cef_shutdown, "cef_shutdown" );
            bindFunc( cast( void** )&cef_do_message_loop_work, "cef_do_message_loop_work" );
            bindFunc( cast( void** )&cef_run_message_loop, "cef_run_message_loop" );
            bindFunc( cast( void** )&cef_quit_message_loop, "cef_quit_message_loop" );
            bindFunc( cast( void** )&cef_set_osmodal_loop, "cef_set_osmodal_loop" );
            bindFunc( cast( void** )&cef_enable_highdpi_support, "cef_enable_highdpi_support" );
            bindFunc( cast( void** )&cef_browser_host_create_browser, "cef_browser_host_create_browser" );
            bindFunc( cast( void** )&cef_browser_host_create_browser_sync, "cef_browser_host_create_browser_sync" );
            bindFunc( cast( void** )&cef_command_line_create, "cef_command_line_create" );
            bindFunc( cast( void** )&cef_command_line_get_global, "cef_command_line_get_global" );
            bindFunc( cast( void** )&cef_cookie_manager_get_global_manager, "cef_cookie_manager_get_global_manager" );
            bindFunc( cast( void** )&cef_cookie_manager_create_manager, "cef_cookie_manager_create_manager" );
            bindFunc( cast( void** )&cef_crash_reporting_enabled, "cef_crash_reporting_enabled" );
            bindFunc( cast( void** )&cef_set_crash_key_value, "cef_set_crash_key_value" );
            bindFunc( cast( void** )&cef_drag_data_create, "cef_drag_data_create" );
            bindFunc( cast( void** )&cef_create_directory, "cef_create_directory" );
            bindFunc( cast( void** )&cef_get_temp_directory, "cef_get_temp_directory" );
            bindFunc( cast( void** )&cef_create_new_temp_directory, "cef_create_new_temp_directory" );
            bindFunc( cast( void** )&cef_create_temp_directory_in_directory, "cef_create_temp_directory_in_directory" );
            bindFunc( cast( void** )&cef_directory_exists, "cef_directory_exists" );
            bindFunc( cast( void** )&cef_delete_file, "cef_delete_file" );
            bindFunc( cast( void** )&cef_zip_directory, "cef_zip_directory" );
            bindFunc( cast( void** )&cef_load_crlsets_file, "cef_load_crlsets_file" );
            bindFunc( cast( void** )&cef_image_create, "cef_image_create" );
            bindFunc( cast( void** )&cef_menu_model_create, "cef_menu_model_create" );
            bindFunc( cast( void** )&cef_add_cross_origin_whitelist_entry, "cef_add_cross_origin_whitelist_entry" );
            bindFunc( cast( void** )&cef_remove_cross_origin_whitelist_entry, "cef_remove_cross_origin_whitelist_entry" );
            bindFunc( cast( void** )&cef_clear_cross_origin_whitelist, "cef_clear_cross_origin_whitelist" );
            bindFunc( cast( void** )&cef_parse_url, "cef_parse_url" );
            bindFunc( cast( void** )&cef_create_url, "cef_create_url" );
            bindFunc( cast( void** )&cef_format_url_for_security_display, "cef_format_url_for_security_display" );
            bindFunc( cast( void** )&cef_get_mime_type, "cef_get_mime_type" );
            bindFunc( cast( void** )&cef_get_extensions_for_mime_type, "cef_get_extensions_for_mime_type" );
            bindFunc( cast( void** )&cef_base64encode, "cef_base64encode" );
            bindFunc( cast( void** )&cef_base64decode, "cef_base64decode" );
            bindFunc( cast( void** )&cef_uriencode, "cef_uriencode" );
            bindFunc( cast( void** )&cef_uridecode, "cef_uridecode" );
            bindFunc( cast( void** )&cef_parse_json, "cef_parse_json" );
            bindFunc( cast( void** )&cef_parse_jsonand_return_error, "cef_parse_jsonand_return_error" );
            bindFunc( cast( void** )&cef_write_json, "cef_write_json" );
            bindFunc( cast( void** )&cef_get_path, "cef_get_path" );
            bindFunc( cast( void** )&cef_print_settings_create, "cef_print_settings_create" );
            bindFunc( cast( void** )&cef_process_message_create, "cef_process_message_create" );
            bindFunc( cast( void** )&cef_launch_process, "cef_launch_process" );
            bindFunc( cast( void** )&cef_request_create, "cef_request_create" );
            bindFunc( cast( void** )&cef_post_data_create, "cef_post_data_create" );
            bindFunc( cast( void** )&cef_post_data_element_create, "cef_post_data_element_create" );
            bindFunc( cast( void** )&cef_request_context_get_global_context, "cef_request_context_get_global_context" );
            bindFunc( cast( void** )&cef_request_context_create_context, "cef_request_context_create_context" );
            bindFunc( cast( void** )&cef_create_context_shared, "cef_create_context_shared" );
            bindFunc( cast( void** )&cef_resource_bundle_get_global, "cef_resource_bundle_get_global" );
            bindFunc( cast( void** )&cef_response_create, "cef_response_create" );
            bindFunc( cast( void** )&cef_register_scheme_handler_factory, "cef_register_scheme_handler_factory" );
            bindFunc( cast( void** )&cef_clear_scheme_handler_factories, "cef_clear_scheme_handler_factories" );
            bindFunc( cast( void** )&cef_server_create, "cef_server_create" );
            bindFunc( cast( void** )&cef_is_cert_status_error, "cef_is_cert_status_error" );
            bindFunc( cast( void** )&cef_is_cert_status_minor_error, "cef_is_cert_status_minor_error" );
            bindFunc( cast( void** )&cef_stream_reader_create_for_file, "cef_stream_reader_create_for_file" );
            bindFunc( cast( void** )&cef_stream_reader_create_for_data, "cef_stream_reader_create_for_data" );
            bindFunc( cast( void** )&cef_stream_reader_create_for_handler, "cef_stream_reader_create_for_handler" );
            bindFunc( cast( void** )&cef_stream_writer_create_for_file, "cef_stream_writer_create_for_file" );
            bindFunc( cast( void** )&cef_stream_writer_create_for_handler, "cef_stream_writer_create_for_handler" );
            bindFunc( cast( void** )&cef_task_runner_get_for_current_thread, "cef_task_runner_get_for_current_thread" );
            bindFunc( cast( void** )&cef_task_runner_get_for_thread, "cef_task_runner_get_for_thread" );
            bindFunc( cast( void** )&cef_currently_on, "cef_currently_on" );
            bindFunc( cast( void** )&cef_post_task, "cef_post_task" );
            bindFunc( cast( void** )&cef_post_delayed_task, "cef_post_delayed_task" );
            bindFunc( cast( void** )&cef_thread_create, "cef_thread_create" );
            bindFunc( cast( void** )&cef_begin_tracing, "cef_begin_tracing" );
            bindFunc( cast( void** )&cef_end_tracing, "cef_end_tracing" );
            bindFunc( cast( void** )&cef_now_from_system_trace_time, "cef_now_from_system_trace_time" );
            bindFunc( cast( void** )&cef_urlrequest_create, "cef_urlrequest_create" );
            bindFunc( cast( void** )&cef_v8context_get_current_context, "cef_v8context_get_current_context" );
            bindFunc( cast( void** )&cef_v8context_get_entered_context, "cef_v8context_get_entered_context" );
            bindFunc( cast( void** )&cef_v8context_in_context, "cef_v8context_in_context" );
            bindFunc( cast( void** )&cef_v8value_create_undefined, "cef_v8value_create_undefined" );
            bindFunc( cast( void** )&cef_v8value_create_null, "cef_v8value_create_null" );
            bindFunc( cast( void** )&cef_v8value_create_bool, "cef_v8value_create_bool" );
            bindFunc( cast( void** )&cef_v8value_create_int, "cef_v8value_create_int" );
            bindFunc( cast( void** )&cef_v8value_create_uint, "cef_v8value_create_uint" );
            bindFunc( cast( void** )&cef_v8value_create_double, "cef_v8value_create_double" );
            bindFunc( cast( void** )&cef_v8value_create_date, "cef_v8value_create_date" );
            bindFunc( cast( void** )&cef_v8value_create_string, "cef_v8value_create_string" );
            bindFunc( cast( void** )&cef_v8value_create_object, "cef_v8value_create_object" );
            bindFunc( cast( void** )&cef_v8value_create_array, "cef_v8value_create_array" );
            bindFunc( cast( void** )&cef_v8value_create_array_buffer, "cef_v8value_create_array_buffer" );
            bindFunc( cast( void** )&cef_v8value_create_function, "cef_v8value_create_function" );
            bindFunc( cast( void** )&cef_v8stack_trace_get_current, "cef_v8stack_trace_get_current" );
            bindFunc( cast( void** )&cef_register_extension, "cef_register_extension" );
            bindFunc( cast( void** )&cef_value_create, "cef_value_create" );
            bindFunc( cast( void** )&cef_binary_value_create, "cef_binary_value_create" );
            bindFunc( cast( void** )&cef_dictionary_value_create, "cef_dictionary_value_create" );
            bindFunc( cast( void** )&cef_list_value_create, "cef_list_value_create" );
            bindFunc( cast( void** )&cef_waitable_event_create, "cef_waitable_event_create" );
            bindFunc( cast( void** )&cef_visit_web_plugin_info, "cef_visit_web_plugin_info" );
            bindFunc( cast( void** )&cef_refresh_web_plugins, "cef_refresh_web_plugins" );
            bindFunc( cast( void** )&cef_unregister_internal_web_plugin, "cef_unregister_internal_web_plugin" );
            bindFunc( cast( void** )&cef_register_web_plugin_crash, "cef_register_web_plugin_crash" );
            bindFunc( cast( void** )&cef_is_web_plugin_unstable, "cef_is_web_plugin_unstable" );
            bindFunc( cast( void** )&cef_register_widevine_cdm, "cef_register_widevine_cdm" );
            bindFunc( cast( void** )&cef_xml_reader_create, "cef_xml_reader_create" );
            bindFunc( cast( void** )&cef_zip_reader_create, "cef_zip_reader_create" );
            bindFunc( cast( void** )&cef_execute_java_script_with_user_gesture_for_tests, "cef_execute_java_script_with_user_gesture_for_tests" );
            bindFunc( cast( void** )&cef_translator_test_create, "cef_translator_test_create" );
            bindFunc( cast( void** )&cef_translator_test_ref_ptr_library_create, "cef_translator_test_ref_ptr_library_create" );
            bindFunc( cast( void** )&cef_translator_test_ref_ptr_library_child_create, "cef_translator_test_ref_ptr_library_child_create" );
            bindFunc( cast( void** )&cef_translator_test_ref_ptr_library_child_child_create, "cef_translator_test_ref_ptr_library_child_child_create" );
            bindFunc( cast( void** )&cef_translator_test_scoped_library_create, "cef_translator_test_scoped_library_create" );
            bindFunc( cast( void** )&cef_translator_test_scoped_library_child_create, "cef_translator_test_scoped_library_child_create" );
            bindFunc( cast( void** )&cef_translator_test_scoped_library_child_child_create, "cef_translator_test_scoped_library_child_child_create" );
            bindFunc( cast( void** )&cef_browser_view_create, "cef_browser_view_create" );
            bindFunc( cast( void** )&cef_browser_view_get_for_browser, "cef_browser_view_get_for_browser" );
            bindFunc( cast( void** )&cef_display_get_primary, "cef_display_get_primary" );
            bindFunc( cast( void** )&cef_display_get_nearest_point, "cef_display_get_nearest_point" );
            bindFunc( cast( void** )&cef_display_get_matching_bounds, "cef_display_get_matching_bounds" );
            bindFunc( cast( void** )&cef_display_get_count, "cef_display_get_count" );
            bindFunc( cast( void** )&cef_display_get_alls, "cef_display_get_alls" );
            bindFunc( cast( void** )&cef_label_button_create, "cef_label_button_create" );
            bindFunc( cast( void** )&cef_menu_button_create, "cef_menu_button_create" );
            bindFunc( cast( void** )&cef_panel_create, "cef_panel_create" );
            bindFunc( cast( void** )&cef_scroll_view_create, "cef_scroll_view_create" );
            bindFunc( cast( void** )&cef_textfield_create, "cef_textfield_create" );
            bindFunc( cast( void** )&cef_window_create_top_level, "cef_window_create_top_level" );
      }
}

__gshared DerelictCEFLoader DerelictCEF;

shared static this() {
    DerelictCEF = new DerelictCEFLoader();
}
